# Use the official amazonlinux AMI image
FROM amazonlinux:latest

# Install apt dependencies
RUN yum install -y gcc gcc-c++ freetype-devel yum-utils findutils openssl-devel 
RUN yum install -y libjpeg-devel gdal-bin libgdal-dev libffi-devel fast
RUN yum install -y automake16 libpng-devel nasm libxml2-devel readline-devel curl-devel cmake3

RUN yum -y groupinstall development


ENV PREFIX=/usr/local
WORKDIR /usr/local

ENV \
  HDF5_VERSION=1.12.0 \
  NETCDF_VERSION=4.7.4

#ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=$PREFIX/lib:$PREFIX/lib64:$LD_LIBRARY_PATH


# libhdf5
RUN mkdir /tmp/hdf5 \
  && curl -sfL https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-$HDF5_VERSION.tar.gz | tar zxf - -C /tmp/hdf5 --strip-components=1 \
  && cd /tmp/hdf5 \
  && CFLAGS="-O2 -Wl,-S" CXXFLAGS="-O2 -Wl,-S" ./configure \
  --prefix=$PREFIX \
  --with-szlib=$PREFIX \
  --enable-cxx \
  --enable-thread-safe \
  --disable-static \
  && make -j $(nproc) --silent && make install && make clean \
  && rm -rf /tmp/hdf5

# netcdf
RUN mkdir /tmp/netcdf \
  && curl -sfL https://github.com/Unidata/netcdf-c/archive/v$NETCDF_VERSION.tar.gz | tar zxf - -C /tmp/netcdf --strip-components=1 \
  && cd /tmp/netcdf \
  && CFLAGS="-O2 -Wl,-S" CXXFLAGS="-O2 -Wl,-S" CPPFLAGS="-I${PREFIX}/include" LDFLAGS="-L${PREFIX}/lib" ./configure \
  --with-default-chunk-size=67108864 \
  --with-chunk-cache-size=67108864 \
  --prefix=$PREFIX \
  --disable-static \
  --enable-netcdf4 \
  --enable-dap \
  --with-pic \
  && make -j $(nproc) --silent && make install && make clean \
  && rm -rf /tmp/netcdf


ENV PATH=$PREFIX/bin/:$PATH


RUN curl https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tar.xz | tar -xJ \
    && cd Python-3.8.2 \
    && ./configure --prefix=$PREFIX --enable-shared \
    && make \
    && make install \
    && cd .. \
    && rm -rf Python-3.8.2


ENV PYTHONPATH="${PYTHONPATH}:/tmp/vendored"

# Install Python dependencies
# RUN pip3 install cython pytest-runner

RUN pip3 install lambda-proxy==0.0.4 --no-binary numpy -t /tmp/vendored -U
RUN pip3 install sat-search==0.3.0 -t /tmp/vendored -U
RUN pip3 install pyproj==1.9.6 rasterio -t /tmp/vendored -U

RUN pip3 install intake-stac -t /tmp/vendored -U
RUN pip3 install shapely==1.7.1 -t /tmp/vendored -U

# Reduce Lambda package size to fit the 250Mb limit
RUN du -sh /tmp/vendored

# This is the list of available modules on AWS lambda Python 3
# ['boto3', 'botocore', 'docutils', 'jmespath', 'pip', 'python-dateutil', 's3transfer', 'setuptools', 'six']
RUN find /tmp/vendored -name "*-info" -type d -exec rm -rdf {} +
RUN rm -rdf /tmp/vendored/boto3/
RUN rm -rdf /tmp/vendored/botocore/
RUN rm -rdf /tmp/vendored/docutils/
RUN rm -rdf /tmp/vendored/dateutil/
RUN rm -rdf /tmp/vendored/jmespath/
RUN rm -rdf /tmp/vendored/s3transfer/
RUN rm -rdf /tmp/vendored/numpy/doc/

# Leave module precompiles for faster Lambda startup
RUN find /tmp/vendored -type f -name '*.pyc' | while read f; do n=$(echo $f | sed 's/__pycache__\///' | sed 's/.cpython-36//'); cp $f $n; done;
RUN find /tmp/vendored -type d -a -name '__pycache__' -print0 | xargs -0 rm -rf
RUN find /tmp/vendored -type f -a -name '*.py' -print0 | xargs -0 rm -f

RUN du -sh /tmp/vendored

COPY app /tmp/vendored/app

# Create archive
RUN cd /tmp/vendored && zip -r9q /tmp/package.zip *

# Cleanup
RUN rm -rf /tmp/vendored/
